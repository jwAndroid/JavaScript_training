const info = {
  id: 1,
  nickname: 'jw',
};

info.id = 2;

// 리액트 에서 상태를 다룰때는 객체를 직접 수정하면 안된다.
// 기존 객체는 그대로 두고, 새로운 객체를 만들어서 원하는값을 덮어씌워야 한다.
// 보통 스프레드 연산자 문법 (...Object)을 사용하여 진행한다.

const newInfo = {
  ...info,
  nickname: 'new name',
};

// 이렇게 새로운 객체를 만들어서 덮어씌워주는 방식을 사용해야한다.

const obj = { a: 1, b: 2, c: 3 };
const newObj = { ...obj, d: 4 };

const obj2 = { a: 'a', b: 'b', c: 'c' };
const newObj2 = { ...obj2, c: 'newC' };

// 스프레드 연산자는 이미 존재하는 키가 있다면 새로운 값으로 바꿔준다. 없다면 추가해준다.
console.log(newObj2);

// 불변성을 유지하는 이유는 리액트에서는 부모컴포넌트가 리렌더링이 발생할때 자식도 모두
// 리렌더링이 되는데 문제는 불필요한 리렌더링이 발생한다는것.
// 새로운 객체나, 배열로 이를 최적화 시켜줄수가 있다.
